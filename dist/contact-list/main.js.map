{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/contact/components/contact-form/contact-form.component.ts","./src/app/contact/components/contact-form/contact-form.component.html","./src/app/contact/components/contact-list/contact-list.component.ts","./src/app/contact/components/contact-list/contact-list.component.html","./src/app/contact/contact.component.ts","./src/app/contact/contact.component.html","./src/app/contact/contact.module.ts","./src/app/contact/services/contact-datasource.ts","./src/app/contact/services/contact.service.ts","./src/app/shared/material.module.ts","./src/app/shared/ui.service.ts","./src/app/shared/utils/util.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'contact-list';\n}\n","<app-contact></app-contact>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\nimport { MaterialModule } from './shared/material.module';\nimport { UIService } from './shared/ui.service';\n\nimport { ContactModule } from './contact/contact.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MaterialModule,\n    ContactModule\n  ],\n  providers: [UIService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Contact } from '../../interfaces/contact';\nimport {\n  MASK_PHONE,\n  REGEX_EMAIL,\n  REGEX_PHONE\n} from '../../../shared/utils/util';\n\n@Component({\n  selector: 'app-contact-form',\n  templateUrl: './contact-form.component.html',\n  styleUrls: ['./contact-form.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContactFormComponent implements OnInit {\n  @Output()\n  saveContact = new EventEmitter<Contact>();\n\n  public mask = MASK_PHONE;\n\n  constructor(private fb: FormBuilder) {}\n\n  public contactForm = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    company: ['', Validators.required],\n    email: ['', [Validators.required, Validators.pattern(REGEX_EMAIL)]],\n    phone: ['', [Validators.required, Validators.pattern(REGEX_PHONE)]],\n    address: ['', Validators.required]\n  });\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    const contact: Contact = {\n      ...this.contactForm.value\n    };\n    this.saveContact.emit(contact);\n  }\n\n  backToList(): void {\n    this.saveContact.emit();\n  }\n}\n","<mat-toolbar color=\"primary\" class=\"fill-remaining-space\">\n  <mat-toolbar-row class=\"toolbar\">\n    <span>Add Contact</span>\n    <a class=\"close-button\" (click)=\"backToList()\">\n      <mat-icon>clear</mat-icon>\n    </a>\n  </mat-toolbar-row>\n</mat-toolbar>\n<div class=\"form-container mat-elevation-z8\">\n  <form class=\"form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"contactForm\">\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>First Name</mat-label>\n        <input\n          matInput\n          formControlName=\"firstName\"\n          placeholder=\"Enter your first name\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('firstName').invalid\"\n          >You must enter a value</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>Last Name</mat-label>\n        <input\n          matInput\n          formControlName=\"lastName\"\n          placeholder=\"Enter your last name\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('lastName').invalid\"\n          >You must enter a value</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>Company</mat-label>\n        <input\n          matInput\n          formControlName=\"company\"\n          placeholder=\"Enter your company\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('company').invalid\"\n          >You must enter a value</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>Email</mat-label>\n        <input\n          matInput\n          formControlName=\"email\"\n          placeholder=\"Enter your email\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('email').errors?.required\"\n          >You must enter a value</mat-error\n        >\n        <mat-error *ngIf=\"contactForm.get('email').errors?.pattern\"\n          >You must enter a valid email</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>Phone</mat-label>\n        <input\n          matInput\n          [textMask]=\"{ mask: mask }\"\n          formControlName=\"phone\"\n          placeholder=\"Enter your phone number\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('phone').errors?.required\"\n          >You must enter a value</mat-error\n        >\n        <mat-error *ngIf=\"contactForm.get('phone').errors?.pattern\"\n          >You must enter a valid phone number</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"form-element\">\n        <mat-label>Address</mat-label>\n        <input\n          matInput\n          formControlName=\"address\"\n          placeholder=\"Enter your address\"\n          required\n        />\n        <mat-error *ngIf=\"contactForm.get('address').invalid\"\n          >You must enter a value</mat-error\n        >\n      </mat-form-field>\n    </div>\n    <div>\n      <button\n        mat-raised-button\n        color=\"primary\"\n        type=\"submit\"\n        [disabled]=\"!contactForm.valid\"\n        class=\"button\"\n      >\n        Submit\n      </button>\n    </div>\n  </form>\n</div>\n","import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output\n} from '@angular/core';\nimport { ContactDataSource } from '../../services/contact-datasource';\n\n@Component({\n  selector: 'app-contact-list',\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContactListComponent implements OnInit {\n  @Input() contactDataSource: ContactDataSource;\n  @Output()\n  emitShowForm = new EventEmitter<void>();\n\n  public displayedColumns = [\n    'firstName',\n    'lastName',\n    'company',\n    'email',\n    'phone',\n    'address'\n  ];\n  public dataSource: ContactDataSource;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.dataSource = this.contactDataSource;\n    this.dataSource.loadContacts();\n  }\n\n  emitAddContact(): void {\n    this.emitShowForm.emit();\n  }\n}\n","<mat-toolbar color=\"primary\" class=\"fill-remaining-space\">\n  <mat-toolbar-row>\n    <span>Contacts</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n\n<div class=\"container\">\n  <div class=\"table-container mat-elevation-z8\">\n    <mat-table [dataSource]=\"dataSource\">\n      <ng-container matColumnDef=\"firstName\">\n        <mat-header-cell *matHeaderCellDef>First Name</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">First Name:</span>\n          {{ element.firstName }}</mat-cell\n        >\n      </ng-container>\n      <ng-container matColumnDef=\"lastName\">\n        <mat-header-cell *matHeaderCellDef>Last Name</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">Last Name:</span>\n          {{ element.lastName }}</mat-cell\n        >\n      </ng-container>\n      <ng-container matColumnDef=\"company\">\n        <mat-header-cell *matHeaderCellDef>Company</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">Company:</span>\n          {{ element.company }}</mat-cell\n        >\n      </ng-container>\n      <ng-container matColumnDef=\"email\">\n        <mat-header-cell *matHeaderCellDef>Email</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">Email:</span>\n          <p style=\"word-break: break-all\">{{ element.email }}</p>\n        </mat-cell>\n      </ng-container>\n      <ng-container matColumnDef=\"phone\">\n        <mat-header-cell *matHeaderCellDef>Phone</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">Phone:</span>\n          {{ element.phone }}</mat-cell\n        >\n      </ng-container>\n      <ng-container matColumnDef=\"address\">\n        <mat-header-cell *matHeaderCellDef>Address</mat-header-cell>\n        <mat-cell *matCellDef=\"let element\">\n          <span class=\"mobile-label\">Address:</span>\n          {{ element.address }}</mat-cell\n        >\n      </ng-container>\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n      <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n    </mat-table>\n  </div>\n  <button\n    class=\"button mat-elevation-z8\"\n    mat-raised-button\n    color=\"primary\"\n    type=\"button\"\n    (click)=\"emitAddContact()\"\n  >\n    Add Contact\n  </button>\n</div>\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { ContactDataSource } from './services/contact-datasource';\nimport { ContactService } from './services/contact.service';\nimport { Contact } from './interfaces/contact';\nimport { UIService } from '../shared/ui.service';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContactComponent implements OnInit {\n  public contactDataSource: ContactDataSource;\n  public showList = true;\n  private successMsg = 'Contact added successfully!';\n  private failMsg = 'Error adding the contact!';\n\n  constructor(\n    private contactService: ContactService,\n    private uiService: UIService\n  ) {}\n\n  ngOnInit(): void {\n    this.contactDataSource = new ContactDataSource(this.contactService);\n    this.contactService.fetchContacts().subscribe();\n  }\n\n  createContact(contact: Contact): void {\n    if (contact) {\n      this.contactService.saveContact(contact).subscribe(\n        newContact => {\n          console.log(JSON.stringify(newContact));\n          this.showList = true;\n          this.uiService.showSnackbar(this.successMsg);\n        },\n        () => {\n          this.uiService.showSnackbar(this.failMsg);\n        }\n      );\n    } else {\n      this.showList = true;\n    }\n  }\n\n  showForm(): void {\n    this.showList = false;\n  }\n}\n","<app-contact-list\n  id=\"contact-list\"\n  *ngIf=\"showList; else contactForm\"\n  (emitShowForm)=\"showForm()\"\n  [contactDataSource]=\"contactDataSource\"\n>\n</app-contact-list>\n<ng-template #contactForm>\n  <app-contact-form id=\"contact-form\" (saveContact)=\"createContact($event)\">\n  </app-contact-form>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { MaterialModule } from '../shared/material.module';\n\nimport { ContactFormComponent } from './components/contact-form/contact-form.component';\nimport { ContactListComponent } from './components/contact-list/contact-list.component';\nimport { ContactComponent } from './contact.component';\n\n@NgModule({\n  declarations: [ContactFormComponent, ContactListComponent, ContactComponent],\n  imports: [CommonModule, ReactiveFormsModule, MaterialModule, TextMaskModule],\n  exports: [ContactFormComponent, ContactListComponent, ContactComponent],\n  bootstrap: []\n})\nexport class ContactModule {}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\n\nimport { Observable, of, Subscription } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Contact } from '../interfaces/contact';\nimport { ContactService } from './contact.service';\n\nexport class ContactDataSource implements DataSource<Contact> {\n  private subscription$: Subscription;\n\n  constructor(private contactService: ContactService) {}\n\n  connect(collectionViewer: CollectionViewer): Observable<Contact[]> {\n    return this.contactService.contacts$;\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {\n    if (this.subscription$) {\n      this.subscription$.unsubscribe();\n    }\n  }\n\n  loadContacts(): void {\n    this.subscription$ = this.contactService.contacts$\n      .pipe(catchError(() => of([])))\n      .subscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Contact } from '../interfaces/contact';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as uuid from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  private contactsSubject = new BehaviorSubject<Contact[]>([]);\n  public contacts$ = this.contactsSubject.asObservable();\n\n  public url = `http://demo5838836.mockable.io/contact`;\n\n  constructor(private http: HttpClient) {}\n\n  fetchContacts(): Observable<Contact[]> {\n    return this.http.get<Contact[]>(this.url).pipe(\n      tap(contacts => {\n        this.mergeContacts(contacts);\n      })\n    );\n  }\n\n  saveContact(contact: Contact): Observable<Contact> {\n    const newContact = this.createContactWithId(contact);\n    return of(newContact).pipe(\n      tap(() => {\n        this.mergeContacts([newContact]);\n      })\n    );\n  }\n\n  private mergeContacts(contacts: Contact[]): void {\n    this.contactsSubject.next(this.contactsSubject.getValue().concat(contacts));\n  }\n\n  private createContactWithId(contact: Contact): Contact {\n    return {\n      ...contact,\n      _id: uuid.v4()\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\n\nconst materialModules = [\n  MatSliderModule,\n  MatButtonModule,\n  MatInputModule,\n  MatFormFieldModule,\n  MatCardModule,\n  MatToolbarModule,\n  MatSnackBarModule,\n  MatTableModule,\n  MatIconModule\n];\n\n@NgModule({\n  declarations: [],\n  imports: [...materialModules],\n  exports: [...materialModules]\n})\nexport class MaterialModule {}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable()\nexport class UIService {\n  constructor(private snackbar: MatSnackBar) {}\n\n  showSnackbar(message: string): void {\n    this.snackbar.open(message, null, { duration: 3000 });\n  }\n}\n","/**\n * @description\n * Regexp to validate email\n */\nexport const REGEX_EMAIL =\n  '[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}';\n\n/**\n * @description\n * Regexp to validate phone number with format\n * +1 (XXX) XXX-XXXX\n */\nexport const REGEX_PHONE =\n  '^\\\\+\\\\d{1,2}\\\\s\\\\(?\\\\d{3}\\\\)?[\\\\s]\\\\d{3}[\\\\s.-]\\\\d{4}$';\n\n/**\n * @description\n * Masks the phone with format\n * +1 (XXX) XXX-XXXX\n */\nexport const MASK_PHONE = [\n  '+',\n  '1',\n  ' ',\n  '(',\n  /[1-9]/,\n  /\\d/,\n  /\\d/,\n  ')',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}